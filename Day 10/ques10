// 	Maximal Rectangle (LeetCode #85)


// brute force code
class Solution {
    public int maximalRectangle(char[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        int ans=0;
        for(int i=0;i<n;i++){
            int[] arr=new int[m];
            for(int j=i;j<n;j++){
                for(int k=0;k<m;k++){
                    arr[k]+=matrix[j][k] - '0';
                }
                int height=j-i+1;
                int sum=0;
                for(int k=0;k<m;k++){
                    if(arr[k]==height){
                        sum+=height;
                        ans=Math.max(ans,sum);
                    }
                    else{
                        sum=0;
                    }
                }
            }
        }
        return ans;
    }
}


// optimized Code

class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix==null || matrix.length==0 || matrix[0].length==0)
            return 0;
        int maxArea=0;
        int cols=matrix[0].length;
        int[] heights = new int[cols];
        for(char[] row : matrix){
            for(int i=0;i<cols;i++){
                heights[i]=(row[i] == '1') ? heights[i] + 1 : 0;
            }
            maxArea=Math.max(maxArea,largestRectangleArea(heights));
        }
        return maxArea;
    }
    public int largestRectangleArea(int[] heights){
        int n=heights.length;
        int[] left=new int[n];
        int[] right=new int[n];
        Stack<Integer> stack = new Stack<>();
        for(int i=0;i<n;i++){
            while(!stack.isEmpty() && heights[stack.peek()]>=heights[i]){
                stack.pop();
            }
            left[i]=(stack.isEmpty()) ? -1 : stack.peek();
            stack.push(i);
        }
        stack.clear();
        for(int i=n-1;i>=0;i--){
            while(!stack.isEmpty() && heights[stack.peek()]>=heights[i]){
                stack.pop();
            }
            right[i]=(stack.isEmpty()) ? n : stack.peek();
            stack.push(i);
        }
        int maxArea=0;
        for(int i=0;i<n;i++){
            int width=right[i]-left[i]-1;
            maxArea=Math.max(maxArea,heights[i]*width);
        }
        return maxArea;
    }
}
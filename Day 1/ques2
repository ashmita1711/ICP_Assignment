// Sliding Window Maximum(Leetcode 239)


//Brute Force Approach

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n =nums.length;
        int[] arr=new int[n-k+1];
        for(int i=0;i<=n-k;i++){
            int maxNum=Integer.MIN_VALUE;
            for(int j=i;j<i+k;j++){
                maxNum=Math.max(maxNum,nums[j]);
            }
            arr[i]=maxNum;
        }
        return arr;
    }
}


//Optimal Approach

import java.util.*;
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n=nums.length;
        int ans[]=new int[n-k+1];
        Deque<Integer> dq=new ArrayDeque<>();
        for(int i=0;i<n;i++){
            while(!dq.isEmpty() && dq.peekFirst()<=i-k){
                dq.pollFirst();
            }
            while(!dq.isEmpty() && nums[dq.peekLast()]<nums[i]) {
                dq.pollLast();
            }
            dq.add(i);
            if(i>=k-1){
                ans[i-k+1]=nums[dq.peekFirst()];
            }
        }

       return ans;
    }
}
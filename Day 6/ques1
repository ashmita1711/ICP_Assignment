//Word Search(LeetCode 79)

//DFS + Backtracking
class Solution {
    public boolean exist(char[][] board, String word) {
        char[] word1=word.toCharArray();
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]==word1[0] && search(board,word1,i,j,0)){
                    return true;
                }
            }
        }
        return false;
    }
    private boolean search(char[][] board,char[] word, int i, int j, int index){
        if(i<0 || i>=board.length || j<0 || j>=board[0].length || board[i][j]=='*' || board[i][j]!=word[index]) return false;
        if(index==word.length-1) return true;
        char c=board[i][j];
        board[i][j]='*';
        boolean ans= search(board,word,i+1,j,index+1) || search(board,word,i-1,j,index+1) || search(board,word,i,j+1,index+1) || search(board,word,i,j-1,index+1); 
        board[i][j]=c;
        return ans;
    }
}